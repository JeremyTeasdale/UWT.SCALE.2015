<# // L2ST4 - LINQ to SQL templates for T4 v0.85 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)
#><#@ template language="C#v3.5" hostspecific="True"#>
<#@ include file="../../T4Include/L2ST4.tt"#>
<#@ output extension=".generated.cs"#>
<# // Set options here
var options = new {
	DbmlFileName = Host.TemplateFile.Replace(".tt",".dbml").Replace("\\Models\\", "\\Repositories\\").Replace("Models", "ILSDB"), // Which DBML file to operate on (same filename as template)
	SerializeDataContractSP1 = false, // Emit SP1 DataContract serializer attributes
	FilePerEntity = false, // Put each class into a separate file
	StoredProcedureConcurrency = false, // Table updates via an SP require @@rowcount to be returned to enable concurrency
};
var code = new CSharpCodeLanguage();
var data = new Data(options.DbmlFileName);
var manager = Manager.Create(Host, GenerationEnvironment); 
data.ContextNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedContextNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
data.EntityNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedEntityNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
manager.StartHeader();
#>#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using System.Runtime.Serialization;


namespace BHS.UWT.TPM.Data
{	
<#
      foreach (Table table in data.Tables.OrderBy(x => x.Name))
      {
          foreach(TableClass class1 in table.Classes) {#>
      public partial class <#=class1.Name#>
      {
               
      <# foreach(Column column in class1.Columns) {#>
      <#=code.Format(column.MemberAttributes)#><#=code.Format(column.Type)#> <#=column.Member#> { get; set; }
      <#}#>
}

<#}
      }#>
      
      
}
<#manager.StartFooter();#>
#pragma warning restore 1591<#
manager.EndBlock(); 
manager.Process(options.FilePerEntity);#>